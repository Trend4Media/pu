// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum RaceType {
  HUMAN
  ZEPHYRIAN
  CRYSTALLINE
  MECHANOID
  VOID_BORN
}

enum PlanetType {
  TERRESTRIAL
  GAS_GIANT
  ICE_WORLD
  VOLCANIC
  DESERT
  OCEAN
  ASTEROID_FIELD
}

enum ShipType {
  FIGHTER
  CORVETTE
  FRIGATE
  DESTROYER
  CRUISER
  BATTLESHIP
  DREADNOUGHT
  CARRIER
  TRANSPORT
  MINING_VESSEL
}

enum ResearchCategory {
  WEAPONS
  DRIVES
  SPECIAL_TECH
  DEFENSE
  ECONOMICS
}

enum AllianceRank {
  MEMBER
  OFFICER
  VICE_LEADER
  LEADER
}

// Core Models
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Player data
  player      Player?
  
  @@map("users")
}

model Player {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic info
  name        String
  race        RaceType
  level       Int      @default(1)
  experience  Int      @default(0)
  cash        Int      @default(10000)
  
  // Resources
  iron        Int      @default(1000)
  silicon     Int      @default(500)
  carbon      Int      @default(300)
  titan       Int      @default(100)
  uranium     Int      @default(50)
  water       Int      @default(200)
  gold        Int      @default(10)
  copper      Int      @default(150)
  
  // Politics & Strategy
  politicalFocus String @default("BALANCED") // FLEET_BUILD, GROUND_TROOPS, RESOURCE_MINING, RESEARCH
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastActive  DateTime @default(now())
  
  // Relations
  colonies         Colony[]
  fleets          Fleet[]
  research        PlayerResearch[]
  allianceMember  AllianceMember?
  tradeOffers     TradeOffer[]
  sentTrades      TradeTransaction[] @relation("TradeSender")
  receivedTrades  TradeTransaction[] @relation("TradeReceiver")
  
  @@map("players")
}

model Planet {
  id            String      @id @default(cuid())
  name          String
  type          PlanetType
  size          Int         // 1-10 scale
  x             Float
  y             Float
  z             Float
  
  // Resources available on planet
  ironRichness     Int @default(0)
  siliconRichness  Int @default(0)
  carbonRichness   Int @default(0)
  titanRichness    Int @default(0)
  uraniumRichness  Int @default(0)
  waterRichness    Int @default(0)
  goldRichness     Int @default(0)
  copperRichness   Int @default(0)
  
  // Planet stats
  temperature   Int
  atmosphere    String
  gravity       Float
  
  // Game mechanics
  isPirateBase  Boolean @default(false)
  isBunkerPlanet Boolean @default(false)
  bunkerAllianceId String?
  bunkerAlliance Alliance? @relation("BunkerPlanet", fields: [bunkerAllianceId], references: [id])
  
  createdAt     DateTime @default(now())
  
  // Relations
  colonies      Colony[]
  fleets        Fleet[] @relation("FleetLocation")
  
  @@map("planets")
}

model Colony {
  id            String   @id @default(cuid())
  planetId      String
  planet        Planet   @relation(fields: [planetId], references: [id])
  playerId      String
  player        Player   @relation(fields: [playerId], references: [id])
  
  name          String
  population    Int      @default(1000)
  
  // Buildings
  mineLevel         Int @default(1)
  factoryLevel      Int @default(1)
  researchLabLevel  Int @default(0)
  defenseLevel      Int @default(0)
  spaceportLevel    Int @default(1)
  
  // Ground forces
  groundTroops      Int @default(100)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([planetId, playerId])
  @@map("colonies")
}

model Alliance {
  id            String   @id @default(cuid())
  name          String   @unique
  tag           String   @unique // Short alliance tag (3-5 chars)
  description   String?
  
  // Alliance resources (for bunker planet)
  iron          Int      @default(0)
  silicon       Int      @default(0)
  carbon        Int      @default(0)
  titan         Int      @default(0)
  uranium       Int      @default(0)
  water         Int      @default(0)
  gold          Int      @default(0)
  copper        Int      @default(0)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  members       AllianceMember[]
  bunkerPlanet  Planet? @relation("BunkerPlanet")
  research      AllianceResearch[]
  metaAlliance  MetaAlliance? @relation(fields: [metaAllianceId], references: [id])
  metaAllianceId String?
  
  @@map("alliances")
}

model AllianceMember {
  id          String       @id @default(cuid())
  playerId    String       @unique
  player      Player       @relation(fields: [playerId], references: [id])
  allianceId  String
  alliance    Alliance     @relation(fields: [allianceId], references: [id])
  
  rank        AllianceRank @default(MEMBER)
  joinedAt    DateTime     @default(now())
  
  @@map("alliance_members")
}

model MetaAlliance {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  
  createdAt     DateTime @default(now())
  
  // Relations
  alliances     Alliance[]
  
  @@map("meta_alliances")
}

model Fleet {
  id          String   @id @default(cuid())
  playerId    String
  player      Player   @relation(fields: [playerId], references: [id])
  
  name        String
  
  // Location
  planetId    String?
  planet      Planet?  @relation("FleetLocation", fields: [planetId], references: [id])
  x           Float?
  y           Float?
  z           Float?
  
  // Fleet composition
  ships       Ship[]
  
  // Status
  isMoving    Boolean  @default(false)
  targetX     Float?
  targetY     Float?
  targetZ     Float?
  arrivalTime DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("fleets")
}

model Ship {
  id          String   @id @default(cuid())
  fleetId     String
  fleet       Fleet    @relation(fields: [fleetId], references: [id], onDelete: Cascade)
  
  type        ShipType
  name        String?
  quantity    Int      @default(1)
  
  // Ship stats (can be modified by research/upgrades)
  attack      Int
  defense     Int
  speed       Int
  cargoSpace  Int
  
  @@map("ships")
}

// Research System
model ResearchTech {
  id            String            @id @default(cuid())
  name          String            @unique
  category      ResearchCategory
  level         Int               @default(1)
  
  description   String
  
  // Requirements
  prerequisiteIds String[]        // Array of required tech IDs
  
  // Costs
  ironCost      Int               @default(0)
  siliconCost   Int               @default(0)
  carbonCost    Int               @default(0)
  titanCost     Int               @default(0)
  uraniumCost   Int               @default(0)
  waterCost     Int               @default(0)
  goldCost      Int               @default(0)
  copperCost    Int               @default(0)
  
  researchTime  Int               // in hours
  
  // Effects (JSON string with bonuses)
  effects       String            // JSON: {"shipAttack": 10, "miningSpeed": 5}
  
  createdAt     DateTime          @default(now())
  
  // Relations
  playerResearch PlayerResearch[]
  allianceResearch AllianceResearch[]
  
  @@map("research_techs")
}

model PlayerResearch {
  id            String      @id @default(cuid())
  playerId      String
  player        Player      @relation(fields: [playerId], references: [id])
  techId        String
  tech          ResearchTech @relation(fields: [techId], references: [id])
  
  level         Int         @default(1)
  isCompleted   Boolean     @default(false)
  startedAt     DateTime    @default(now())
  completedAt   DateTime?
  
  @@unique([playerId, techId])
  @@map("player_research")
}

model AllianceResearch {
  id            String      @id @default(cuid())
  allianceId    String
  alliance      Alliance    @relation(fields: [allianceId], references: [id])
  techId        String
  tech          ResearchTech @relation(fields: [techId], references: [id])
  
  level         Int         @default(1)
  isCompleted   Boolean     @default(false)
  startedAt     DateTime    @default(now())
  completedAt   DateTime?
  
  @@unique([allianceId, techId])
  @@map("alliance_research")
}

// Trading System
model TradeOffer {
  id            String   @id @default(cuid())
  playerId      String
  player        Player   @relation(fields: [playerId], references: [id])
  
  // What they're offering
  offerIron     Int      @default(0)
  offerSilicon  Int      @default(0)
  offerCarbon   Int      @default(0)
  offerTitan    Int      @default(0)
  offerUranium  Int      @default(0)
  offerWater    Int      @default(0)
  offerGold     Int      @default(0)
  offerCopper   Int      @default(0)
  offerCash     Int      @default(0)
  
  // What they want
  wantIron      Int      @default(0)
  wantSilicon   Int      @default(0)
  wantCarbon    Int      @default(0)
  wantTitan     Int      @default(0)
  wantUranium   Int      @default(0)
  wantWater     Int      @default(0)
  wantGold      Int      @default(0)
  wantCopper    Int      @default(0)
  wantCash      Int      @default(0)
  
  isActive      Boolean  @default(true)
  expiresAt     DateTime?
  
  createdAt     DateTime @default(now())
  
  @@map("trade_offers")
}

model TradeTransaction {
  id            String   @id @default(cuid())
  senderId      String
  sender        Player   @relation("TradeSender", fields: [senderId], references: [id])
  receiverId    String
  receiver      Player   @relation("TradeReceiver", fields: [receiverId], references: [id])
  
  // Resources traded
  iron          Int      @default(0)
  silicon       Int      @default(0)
  carbon        Int      @default(0)
  titan         Int      @default(0)
  uranium       Int      @default(0)
  water         Int      @default(0)
  gold          Int      @default(0)
  copper        Int      @default(0)
  cash          Int      @default(0)
  
  executedAt    DateTime @default(now())
  
  @@map("trade_transactions")
}

// Game Events & Logs
model GameEvent {
  id          String   @id @default(cuid())
  type        String   // BATTLE, TRADE, RESEARCH_COMPLETE, COLONY_FOUNDED, etc.
  playerId    String?
  
  title       String
  description String
  data        String?  // JSON data for event details
  
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  
  @@map("game_events")
}